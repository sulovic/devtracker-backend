generator client {
  provider = "prisma-client-js"
  output   = "client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_PRODUCTSALES_URL")
}

model Users {
  userId        Int                @id @default(autoincrement())
  firstName     String             @db.VarChar(64)
  lastName      String             @db.VarChar(64)
  email         String             @unique @db.VarChar(64)
  password      String?            @db.VarChar(64)
  refreshToken  String?            @db.VarChar(1024)
  resetToken    String?            @db.VarChar(64)
  roles         UserRolesOnUsers[]
  createdAt     DateTime           @default(now())
  statusHistory StatusHistory[]
  comments      Comments[]
  issues        Issues[]

  @@index([email])
}

model UserRoles {
  roleId        Int                @id @default(autoincrement())
  roleName      String             @db.VarChar(64)
  users         UserRolesOnUsers[]
  issues        Issues[]
  statusHistory StatusHistory[]
}

model UserRolesOnUsers {
  userId   Int
  roleId   Int
  user     Users?     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  userRole UserRoles? @relation(fields: [roleId], references: [roleId], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, roleId])
}

model Products {
  productId   Int      @id @default(autoincrement())
  productName String   @db.VarChar(64)
  issues      Issues[]
}

model Types {
  typeId   Int      @id @default(autoincrement())
  typeName String   @db.VarChar(64)
  issues   Issues[]
}

model Priority {
  priorityId   Int      @id @default(autoincrement())
  priorityName String   @db.VarChar(64)
  issues       Issues[]
}

model Statuses {
  statusId      Int             @id @default(autoincrement())
  statusName    String          @db.VarChar(64)
  issues        Issues[]
  statusHistory StatusHistory[]
}

model Issues {
  issueId       Int             @id @default(autoincrement())
  issueName     String          @db.VarChar(64)
  issueDesc     String          @db.VarChar(512)
  createdAt     DateTime        @default(now())
  closedAt      DateTime?
  product       Products?       @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction)
  productId     Int?
  type          Types           @relation(fields: [typeId], references: [typeId], onDelete: Cascade, onUpdate: NoAction)
  typeId        Int
  status        Statuses        @relation(fields: [statusId], references: [statusId], onDelete: Cascade, onUpdate: NoAction)
  statusId      Int
  user          Users           @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  userId        Int
  priority      Priority        @relation(fields: [priorityId], references: [priorityId], onDelete: Cascade, onUpdate: NoAction)
  priorityId    Int
  respRole      UserRoles       @relation(fields: [respRoleId], references: [roleId], onDelete: Cascade, onUpdate: NoAction)
  respRoleId    Int
  statusHistory StatusHistory[]
  comments      Comments[]

  @@index([issueId, issueName, issueDesc, userId, statusId])
}

model StatusHistory {
  statusHistoryId Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  user            Users     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  userId          Int
  status          Statuses  @relation(fields: [statusId], references: [statusId], onDelete: Cascade, onUpdate: NoAction)
  statusId        Int
  issue           Issues    @relation(fields: [issueId], references: [issueId], onDelete: Cascade, onUpdate: NoAction)
  issueId         Int
  respRole        UserRoles @relation(fields: [respRoleId], references: [roleId], onDelete: Cascade, onUpdate: NoAction)
  respRoleId      Int
}

model Comments {
  commentId   Int         @id @default(autoincrement())
  commentText String      @db.VarChar(512)
  createdAt   DateTime    @default(now())
  user        Users       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  userId      Int
  issue       Issues      @relation(fields: [issueId], references: [issueId], onDelete: Cascade, onUpdate: NoAction)
  issueId     Int
  documents   Documents[]
}

model Documents {
  documentId  Int       @id @default(autoincrement())
  documentUrl String    @db.VarChar(512)
  comment     Comments? @relation(fields: [commentId], references: [commentId], onDelete: Cascade, onUpdate: NoAction)
  commentId   Int?

  @@index([documentId])
}
